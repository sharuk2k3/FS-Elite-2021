/*'''
Mr Sudhakar is given a checkerboard of size 400*400, where the indices starts 
from (-200,-200) and ends at (199,199). In one step, he can move the box from 
position (p,q) to one of the following positions in L shape like as follows: 
	- (p-2, q-1), (p-2, q+1), (p+2, q-1), (p+2, q+1)
	- (p-1, q+2), (p+1, q+2), (p-1, q-2), (p+1, q-2)

Initially the box is at (0,0) position, and need to move the box to position (m,n).
You will be given two integers m and n indicates the position(m,n).

Now your task is to help by Mr Sudhakar to find the minimum number of steps 
required to move the box from (0,0) to (m,n).

Note: It is allowed to move out of the board also.

Input Format:
-----------------
Two space separated integers, m and n, position.

Output Format:
------------------
Print an integer, minimum number of steps to reach (m,n).


Sample Input-1:
---------------
2 4

Sample Output-1:
----------------
2

Explanation:
-------------
Initially, you are at (0,0) position, you can reach (2,4) as follows:
(0,0) -> (1, 2) -> (2, 4) 


Sample Input-2:
---------------
4 7

Sample Output-2:
----------------
5

Explanation:
------------
Initially, you are at (0,0) position, you can reach (4,7) as follows:
(0,0) -> (1, 2) -> (2, 4) -> (1, 6) -> (3, 5) -> (4, 7)
'''

*/
#include<bits/stdc++.h>

using namespace std;

int main(){
    
    int n,m;
    cin>>n>>m;
    
    map<pair<int,int>,int> visited;
    queue<pair<int,int>> q;
    
    int y[8] = {-1,-1,1,1,-2,-2,2,2};
    int x[8] = {-2,2,-2,2,-1,1,1,-1};
    
    q.push({0,0});
    int flag=1;
    visited[{0,0}]=1;
    int count=0;
    
    while(flag && !q.empty()){
        int curr = q.size();
        
        for(int i=0;i<curr;i++){
            pair<int,int> p1 = q.front();
           
            if(p1.first==n && p1.second==m){
                flag=0;
                break;
            }
            q.pop();
            for(int j=0;j<8;j++){
                if(visited[{p1.first+x[j],p1.second+y[j]}]==0 && (((p1.first+x[j])*n)>=0 || ((p1.second+y[j])*m)>=0)){
                    q.push({p1.first+x[j],p1.second+y[j]});
                    visited[{p1.first+x[j],p1.second+y[j]}]=1;
                }
            }
            
        }
        count++;
        
    }
    cout<<count-1<<endl;
    
    
    
    
    
    
}