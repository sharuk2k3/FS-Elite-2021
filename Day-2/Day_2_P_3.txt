/*
You are playing a game. There are N boxes placed in a row (0-indexed), 
every box has some points. You need to play the game with the following rules:
 - Initially your score is  '0' points.
	- Suppose the box has p points in it.
	  if p>0 you will gain p points, if p<0 you will loose p points.
	- You are allowed to choose any number of consecutive boxes, atleast 1 box.
   	
You are given the points in the N boxes as points[]. 
Your target is to maximize your score by droping atmost one box in the set of 
consecutive boxes, and return the highest score possible. 

Note : The score should be considered for atleast 1 box even after droping a box.
 
Input Format:
-------------
Line-1: An integer N.
Line-2: N space separated integers, points[].
  
Output Format:
--------------
An integer, print the highest score.
    
Sample Input-1:
---------------
9
-3 1 -2 4 -2 2 3 -5 4
 
Sample Output-1:
----------------
 11
   
Explanation:
------------
By selecting consecutive boxes [4,-2,2,3,-5,4] and dropping -5 , has the highest
score is 11.
   
 
Sample Input-2:
---------------
 2
 1 -2
  
Sample Output-2:
----------------
1

Explanation:
------------
By picking the box is [1] has the highest score is 1.

*/


#include<bits/stdc++.h>

using namespace std;

int get_ans(vector<int>& v){
    
    int run1 = 0, min1 = 0, run2 = 0, min2 = 0, res = INT_MIN;
  for (int n : v)
  {
      if (run1 <= 0)
          run1 = min1 = 0;
      run1 += n;
      res = max(res, run1 - min1);
      min1 = min(min1, n);
  }
  for (int i = 0, min_i = -1; i < v.size(); ++i) {
      if (run2 - min2 <= 0) {
          run2 = min2 = 0;
          if (min_i != -1) {
              i = min_i;
              min_i = -1;
              continue;
          }
      }
      run2 += v[i];
      res = max(res, run2 - min2);
      if (v[i] < min2) {
          min_i = i;
          min2 = v[i];
      }
  }
  return res;
    
    
 
}


int main(){
    
    int n;
    cin>>n;
    
    vector<int> v(n);
    for(int i=0;i<n;i++){
        cin>>v[i];
    }
    cout<<get_ans(v);
}