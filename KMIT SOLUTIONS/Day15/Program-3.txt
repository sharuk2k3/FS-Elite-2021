/*
"Enigma" is a German encoding machine which was used to transmit messages as 
numbers. Alan Turing a British cryptologist has hired KMIT students to break 
the code and save England. 

Alan has figured out and informed you that each letter is represented as 
number in enigma with 'a' being 1 'b' being 2,.. and 'z' being 26. 

However a number 211 can mean "ua" or "baa" or "bk". Further Turing has 
also supplied you with a dictionary of potential targets which Germany is 
likely to attack like "london" ,"reading" , "york" etc. 

Given an enigma generated message, you should help Turing inform the British 
Defence system about the next target. For example 12151441514 means the next 
attack is on London. Similarly 25151811 means York will be attacked.


Input Format:
-------------
Line-1 -> space seperated Strings, dictionary of potential targets.
Line-2 -> a String, enigma generated message.

Output Format:
--------------
Print the potential target.


Sample Input-1:
---------------
london reading york cambridge oxford norwich bradford 
12151441514

Sample Output-1:
----------------
london


Sample Input-2:
---------------
london reading york cambridge oxford norwich bradford
31132189475

Sample Output-2:
----------------
cambridge

NOTE: If there is no match found print "No Match"

Test Cases:
case =1
input =11232134221
output =45

case =2
input =213231551424
output =48

case =3
input =31222112212223222
output =1131

case =4
input =1424123432412312211324516542133212
output =33696

case =5
input =122121222221210920102012201201212201110
output =7540

case =6
input =1221212222212101222121212010201220120121220111012212
output =3317600

case =7
input =1221212222212101222121242234
output =62205

case =8
input =112411152211211212411121212110111021212
output =3168000

case =9
input =123
output =3

case =10
input =326
output =2

*/

Solution:

import java.util.*;

class DecodeWord {

    Map<Integer, Integer> memo = new HashMap<>();

    public int numDecodings(String s) {
        return recursiveWithMemo(0, s);
    }
    
    private int recursiveWithMemo(int index, String str) {
        // Have we already seen this substring?
        if (memo.containsKey(index)) {
            return memo.get(index);
        }
        
        // If you reach the end of the string
        // Return 1 for success.
        if (index == str.length()) {
            return 1;
        }

        // If the string starts with a zero, it can't be decoded
        if (str.charAt(index) == '0') {
            return 0;
        }

        if (index == str.length() - 1) {
            return 1;
        }


        int ans = recursiveWithMemo(index + 1, str);
        if (Integer.parseInt(str.substring(index, index + 2)) <= 26) {
             ans += recursiveWithMemo(index + 2, str);
         }

        // Save for memoization
        memo.put(index, ans);

        return ans;
    }
	
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		String en=sc.next();
		System.out.println(new DecodeWord().numDecodings(en));
	}
}