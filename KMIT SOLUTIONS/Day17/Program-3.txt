/*
Sreehan is a young programmer, wants to solve the new kind of challenges 
through coding.

He is given a set of distinct positive numbers,
He need to find the number of valid quadruples can be formed with the given set.

The rules to form a valid qudraples are as follows:
    - Quadrule contains 4 elements [k, l, m, n]
    - where [k * l] = [m * n]
    - and k != l != m != n

Can you please help Sreehan, in solving this challenge!

Input Format:
-------------
Line-1: An integer N, number of elements in the set.
Line-2: N space seperated distinct integers, Set.

Output Format:
--------------
Print an integer, Number of Valid Quadruples.


Sample Input-1:
---------------
5
3 2 4 1 6

Sample Output-1:
----------------
16

Explanation:
-------------
There are 16 valid Quadrules:
(2,3,1,6) , (2,3,6,1) , (6,1,3,2) , (6,1,2,3)
(3,2,1,6) , (3,2,6,1) , (1,6,3,2) , (1,6,2,3)
(2,6,3,4) , (2,6,4,3) , (6,2,3,4) , (6,2,4,3)
(3,4,2,6) , (4,3,2,6) , (3,4,6,2) , (4,3,6,2)


Sample Input-2:
---------------
4
2 3 5 7

Sample Output-2:
----------------
0

Test Cases:
case =1
input =5
1 2 3 4 6
output =16

case =2
input =4
2 3 5 7
output =0

case =3
input =6
2 3 4 6 8 12
output =40

case =4
input =8
2 4 6 8 10 12 14 16
output =32

case =5
input =10
5 10 15 20 25 30 35 40 45 50
output =72

case =6
input =20
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
output =536

case =7
input =25
1 2 3 4 6 8 9 10 12 14 15 16 18 20 21 22 24 25 26 27 28 30 32 33 34 
output =1216

case =8
input =38
1 2 3 4 6 8 9 10 12 14 15 16 18 20 21 22 24 25 26 27 28 30 32 33 34 35 36 38 39 40 42 44 45 46 48 49 50 52
output =3872

*/
Solution:
import java.util.*;

class TupleSameProduct {
    public int tupleSameProduct(int[] nums) {
        int cnt = 0;
        Map<Integer, Integer> products = new HashMap<>();
        for (int i = 0, n = nums.length; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                int prod = nums[i] * nums[j];
                int numOfProducts = products.getOrDefault(prod, 0);
                cnt += 8 * numOfProducts;
                products.put(prod, 1 + numOfProducts);
            }
        }
        return cnt;
    }
	
	public static void main(String[] args) { 
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int arr[]=new int[n];
		for(int i=0;i<n;i++)
			arr[i]=sc.nextInt();
		System.out.println(new TupleSameProduct().tupleSameProduct(arr) ); 
	}
}