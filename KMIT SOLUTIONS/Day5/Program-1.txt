/*
Rahul works in a Water purifying plant.His job is to pack the water bottles of 
different sizes in a box.He packed the water bottles in different boxes.Each box
may have different number of bottles and the count is printed on the box.

Rahul asked Suresh to send these bottles in a grid(0-indexed) where one box can
be placed in one cell.
grid[i][j] represents the count printed on the box placed on cell (i,j)

Given a shift value 's' , Suresh has to shift the boxes 's' times in the grid.

In one shift , he can move:
   -grid[i][j] to grid[i][j+1]
   -grid[i][q-1] to grid[i+1][0]
   -grid[p-1][q-1] to grid[0][0].
Return the 2D-grid after shifting.

Input Format:
 -------------
 Line -1: 3 space seperated integers p , q and s represents number of rows ,number of columns and number of shifts..
 next p-Lines: q Space separated integers represents count printed on the box. 

Output Format:
 --------------
 Print a 2D array, 
  
Sample Input -1:
-------------
3 3 2
2 3 4
5 6 7
8 9 10
    
Sample Output -1:
--------------
9 10 2 
3 4 5 
6 7 8 
    
Explanation:
 -----------
As s=2, Every value is shifted forward 2 times.
grid[0][0]=2 is shifted to grid[0][2], grid[0][1]=3 is shifted to grid[1][0] and so on...

  
Sample Input-2:
-------------
4 5 3
1 2 3 4 5
6 7 8 9 10
11 12 13 14 15
5 4 2 3 1
    
Sample Output-2:
--------------
2 3 1 1 2 
3 4 5 6 7 
8 9 10 11 12 
13 14 15 5 4 
    
Test Cases:
case =1
input =3 3 2
2 3 4
5 6 7
8 9 10
output =9 10 2 
3 4 5 
6 7 8 

case =2
input =4 5 3
1 2 3 4 5
6 7 8 9 10
11 12 13 14 15
5 4 2 3 1
output =2 3 1 1 2 
3 4 5 6 7 
8 9 10 11 12 
13 14 15 5 4 

case =3
input =5 7 4
3 1 1 1 1 1 4
2 2 3 1 2 2 2
4 1 4 4 3 2 4
1 3 2 4 2 1 4
2 4 1 3 3 4 4
output =3 3 4 4 3 1 1 
1 1 1 4 2 2 3 
1 2 2 2 4 1 4 
4 3 2 4 1 3 2 
4 2 1 4 2 4 1 

case =4
input =9 4 5
12 15 8 1
13 4 3 7
13 10 13 3
12 4 1 5
13 12 3 8
6 9 2 9
9 11 11 7
6 6 14 5
12 14 3 9
output =5 12 14 3 
9 12 15 8 
1 13 4 3 
7 13 10 13 
3 12 4 1 
5 13 12 3 
8 6 9 2 
9 9 11 11 
7 6 6 14 

case =5
input =8 10 7
7 6 4 5 11 9 11 11 6 3
5 10 12 5 2 5 5 4 4 2
10 5 7 1 10 10 5 6 6 5
12 8 6 12 4 2 9 6 5 4
4 7 1 9 8 7 2 9 11 3
12 12 2 3 3 3 3 6 11 12
5 5 3 2 9 9 6 12 10 1
1 5 8 1 7 1 5 11 10 11
output =1 7 1 5 11 10 11 7 6 4 
5 11 9 11 11 6 3 5 10 12 
5 2 5 5 4 4 2 10 5 7 
1 10 10 5 6 6 5 12 8 6 
12 4 2 9 6 5 4 4 7 1 
9 8 7 2 9 11 3 12 12 2 
3 3 3 3 6 11 12 5 5 3 
2 9 9 6 12 10 1 1 5 8 

case =6
input =2 3 6
7 10 1
11 5 1
output =7 10 1 
11 5 1 

case =7
input =6 6 36
3 7 8 9 6 8
8 3 7 8 3 10
1 10 10 4 4 8
7 9 9 6 5 4
7 8 2 10 10 8
2 8 8 7 4 3
output =3 7 8 9 6 8 
8 3 7 8 3 10 
1 10 10 4 4 8 
7 9 9 6 5 4 
7 8 2 10 10 8 
2 8 8 7 4 3 


case =8
input =6 6 2
3 7 8 9 6 8
8 3 7 8 3 10
1 10 10 4 4 8
7 9 9 6 5 4
7 8 2 10 10 8
2 8 8 7 4 3
output =4 3 3 7 8 9 
6 8 8 3 7 8 
3 10 1 10 10 4 
4 8 7 9 9 6 
5 4 7 8 2 10 
10 8 2 8 8 7 

*/
Solution:
import java.util.*;

class Test {
    public int[][] shiftGrid(int[][] grid, int k) {
        int rowCount = grid.length;                         // Number of rows in grid.
        int colCount = grid[0].length;                      // Number of columns in grid.
        int gridCount = rowCount * colCount;                // Number of cells (i.e. values) in grid.
        k = k % gridCount;                                  // Limit k to max number of cells in grid.  Avoid negatives in next lines.
        int kCol = (gridCount - k) % colCount;              // Column to start copying from.
        int kRow = ((gridCount - k) % gridCount) / colCount;// Row to start copying from.
        int[] innRow = grid[kRow];                          // Array for the row to start copying from.
        int[][] result = new int[rowCount][colCount];       // Create result matrix, to hold shifted values.
        for (int r = 0; r < rowCount; r++) {                // Loop through "to" rows.
            int[] outRow = result[r];                       // Get row array to copy into, so only faster 1D reference in inner loop.
            for (int c = 0; c < colCount; c++) {            // Loop through "to" columns.
                outRow[c] = innRow[kCol];                   // Copy value from grid to result, shifting by copying.
                if (++kCol >= colCount) {                   // Next "from" column.  If at end of row...
                    kCol = 0;                               // Then start "from" columns at first column.
                    if (++kRow >= rowCount)                 // When starting new column, next "from" row.  If at end of grid...
                        kRow = 0;                           // Then start "from" rows at first row.
                    innRow = grid[kRow];                    // Get row array to copy from, so only faster 1D reference when copying.
                }
            }
        }
        return result;                 // Return result matrix, converting it to a List<List<Integer>>.
    }
	
	public static void main(String[] args) { 
		Scanner sc=new Scanner(System.in);
		int m=sc.nextInt();
		int n=sc.nextInt();
		int k=sc.nextInt();
		int grid[][]=new int[m][n];
		for(int i=0;i<m;i++)
		for(int j=0;j<n;j++)
			grid[i][j]=sc.nextInt();
		int[][] result = new Test().shiftGrid(grid,k);
		for(int[] list: result){
			for(int i:list)
				System.out.print(i+" "); 
			System.out.println( );
		}	
	}
}