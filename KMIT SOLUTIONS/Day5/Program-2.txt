/*
For X-Mas, santa claus is preparing a X-Mas Tree with set of Bulbs.
The bulbs are of different voltages, and preparation of tree as follows:
	- The bulbs are arranged in level-wise, levels are numbered from 0,1,2,3..
	  so on.
	- At level-0: There will be only one bulb as root bulb.,
	- From next level onwards, we can attach atmost two bulbs to left side,
	  and right side of every bulb in previous level.
	- The empty attachements in a level are indicated with -1. 
	(for example: look in hint)
	
Entire X-Mas tree has to be prepared with certian rules as follows:
	- For every even level in the X-Mas Tree, all the bulbs should have
	  odd voltages in strictly ascending order.
	- For every odd level in the X-Mas Tree, all the bulbs should have
	  even voltages in strictly descending order.
	
You will be given the X-Mas Tree root,
Your task is to findout whether the X-Mas tree is prepared as per the rules
or not.

Implement the class Solution.
1.public boolean isXmasTree(BinaryTreeNode root): returns a boolean value.


Input Format:
-------------
A single line of space separated integers, voltages of the set of bulbs.

Output Format:
--------------
Print a boolean value.



Sample Input-1:
---------------
3 8 4 3 5 -1 7 

Sample Output-1:
----------------
true


Sample Input-2:
---------------
3 8 4 3 5 7 7 

Sample Output-2:
----------------
false


Sample Input-3:
---------------
1

Sample Output-3:
----------------
true


Test Cases:
case =1
input =3 8 4 3 5 -1 7 
output =true

case =2
input =3 8 4 3 5 7 7 
output =false

case =3
input =1
output =true

case =4
input =1 10 4 3 -1 7 9 12 8 6 -1 -1 2 
output =true

case =5
input =5 4 2 3 3 7
output =false

case =6
input =5 9 1 3 5 7
output =false

case =7
input =11 8 6 1 3 9 11 30 20 18 16 12 10 4 2 17
output =true

case =8
input =1 4 2 3 -1 -1 5 6 -1 -1 -1 -1 -1 -1 4 5 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 7
output =true
*/
Solution:
import java.util.*;
/*
//TreeNode Structure for Your Reference..

class BinaryTreeNode{
	public int data; 
	public BinaryTreeNode left, right; 
	public BinaryTreeNode(int data){
		this.data = data; 
		left = null; 
		right = null; 
	}
}

*/

class Solution {
    public boolean isXmasTree(BinaryTreeNode root) {
        if (root.data % 2 == 0) return false;
        boolean isEven = true;
        ArrayDeque<BinaryTreeNode> deque = new ArrayDeque<>();

        deque.addLast(root);
        while (!deque.isEmpty()) {
            int prev = isEven ? -1 : Integer.MAX_VALUE;
            int size = deque.size();
            for (int i = 0; i < size; i++) {
                BinaryTreeNode parent = deque.removeFirst();
                if ((isEven && parent.data <= prev) ||
                        (!isEven && parent.data >= prev)) return false;

                prev = parent.data;


                if (parent.left!=null && parent.left.data != -1) {
                    if ((isEven && parent.left.data % 2 != 0) 
                        || (!isEven && parent.left.data % 2 == 0)) return false;
                    deque.addLast(parent.left);
                }
                if (parent.right!=null && parent.right.data != -1) {
                    if ((isEven && parent.right.data % 2 != 0) 
                        || (!isEven && parent.right.data % 2 == 0))
                        return false;
                    deque.addLast(parent.right);
                }
            }
            isEven = !isEven;
        }
        return true;
    }
}


Background File:
================
import java.util.*;

class BinaryTreeNode{
	public int data; 
	public BinaryTreeNode left, right; 
	public BinaryTreeNode(int data){
		this.data = data; 
		left = null; 
		right = null; 
	}
}

public class BinaryTree{
	static BinaryTreeNode root;
	static BinaryTreeNode temp = root;
	void insert(BinaryTreeNode temp, int key)
    {
 
        if (temp == null) {
            root = new BinaryTreeNode(key);
            return;
        }
        Queue<BinaryTreeNode> q = new LinkedList<BinaryTreeNode>();
        q.add(temp);
 
        // Do level order traversal until we find
        // an empty place.
        while (!q.isEmpty()) {
            temp = q.peek();
            q.remove();
 
            if (temp.left == null) {
                temp.left = new BinaryTreeNode(key);
                break;
            }
            else
                q.add(temp.left);
 
            if (temp.right == null) {
                temp.right = new BinaryTreeNode(key);
                break;
            }
            else
                q.add(temp.right);
        }
    }
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		String str[]=sc.nextLine().split(" ");
		BinaryTree bt=new BinaryTree();
		root=new BinaryTreeNode(Integer.parseInt(str[0]));
		for(int i=1; i<str.length; i++)
			bt.insert(root,Integer.parseInt(str[i]));
		Solution sol= new Solution();
		System.out.println(sol.isXmasTree(root));
	}
}