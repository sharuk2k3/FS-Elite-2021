/*
A Kid is arranging a structure using building blocks, 
by placing individual building-block adjacent to each other.

A building-block is a vertical alignment of blocks.
	                            ___
here one block each represents  as |___|.

The following structure made up of using building blocks

                          ___
                      ___|___|    ___
                     |___|___|_w_|___|___              ___
                  ___|___|___|___|___|___| w   _w_  w |___| 
              ___|___|___|___|___|___|___|_w__|___|_w_|___|____________
    
               0  1   3   4   2   3    2   0   1   0   2

Once the structure is completed, kid pour water(w) on it.

You are given a list of integers, heights of each building-block in a row.
 Now your task How much amount of water can be stored by the structure.

 Input Format:
 -------------
 Space separated integers, heights of the blocks in the structure. 

Output Format:
 --------------
 Print an integer, 
  
Sample Input:
-------------
 0 1 3 4 2 3 2 0 1 0 2
    
Sample Output:
--------------
6
    
Explanation:
 -----------
In the above structure,  6 units of water (w represents the water in the structure)
can be stored.

Test Cases:
case =1
input =10
1 4 2 5 6 3 7 1 2 6
output =14

case =2
input =12
1 5 1 1 4 6 7 8 3 0 0 5
output =21

case =3
input =12
5 0 0 0 0 0 1 1 1 0 0 4
output =37

case =4
input =12
5 4 2 2 6 0 1 1 1 3 0 4
output =25

case =5
input =10
1 2 3 4 5 6 7 8 9 3
output =0

case =6
input =10
1 6 3 4 8 2 4 8 1 12
output =22

case =7
input =20
10 11 8 13 4 6 12 6 3 15 7 6 1 13 3 8 11 8 3 14
output =103
 
case =8
input =31
15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
output =225
*/
Solution:
import java.util.*;

public class Test {
	public int trap(int[] height) { 
        int left = 0;
        int right = height.length-1;        
        if (height == null || height.length <= 2) {
            return 0;
        }
        while (left<height.length-1 && height[left]<=height[left+1]){ //determines the first left local max
            left++;
        }
        while (right>left && height[right-1]>=height[right]) { //determins the first right local max
            right--;
        }
        if (left==right){ //determines if the array is strictly non-increasing or non-decreasing or A-shaped
            return 0;
        }
        return recursiveTrap(height, 0, left, right, left, right); 
    }
    private int recursiveTrap(int[] height, int totalArea, int left, int right, int pivotL, int pivotR) {        
        if (pivotL >= pivotR) { 
            return totalArea;
        }
        if (height[pivotL] < height[pivotR]) { //pivotL and pivotR refer to the local max on the left and right sides of the array
            left++; //left refers to the pointer that helps determines the area to the left of pivotL
            if (height[pivotL] <= height[left]) { 
                return recursiveTrap(height, totalArea, left, right, left, pivotR);
            }
            else {
                return recursiveTrap(height, totalArea+height[pivotL]-height[left], left, right, pivotL, pivotR);
            }
        }
        else {
            right--; //right refers to the pointer that helps determines the area to the right of pivotR
            if (height[pivotR] <= height[right]) {
                return recursiveTrap(height, totalArea, left, right, pivotL, right);
            }
            else {
                return recursiveTrap(height, totalArea+height[pivotR]-height[right], left, right, pivotL, pivotR);
            }
        }            
    }
	public static void main(String args[])
    {
        Scanner scan = new Scanner(System.in);
        int n=scan.nextInt();
        int[] nums = new int[n];
        for (int i = 0; i < n; i++)
			nums[i]=scan.nextInt();
		System.out.println(new Test().trap(nums));
	}
}