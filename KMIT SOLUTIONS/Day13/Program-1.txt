/*
In a shopping mall, there is a Lift with a capacity of 500kgs only.
There are N persons waiting for the lift, and their weights (weights[]) are given.
If The Lift is overloaded, it will not move.
 
Your task is to find out the maximum number of persons can use the Lift,
without any overloading issue.

Input Format:
-------------
Line-1: An integer N, number of persons
Line-2: N space separated integers, weights of the persons.

Output Format:
--------------
Print an integer, max num of persons can use the lift.


Sample Input-1:
---------------
6
98 121 76 135 142 65

Sample Output-1:
----------------
5


Sample Input-2:
---------------
7
85 67 69 83 54 61 50

Sample Output-2:
----------------
7

Test Cases:
case =1
input =6
98 121 76 135 142 65
output =5

case =2
input =7
85 67 69 83 54 61 50
output =7

case =3
input =10
58 90 107 60 106 108 100 80 68 43
output =7

case =4
input =15
66 42 56 73 52 78 53 70 68 78 69 61 48 79 40
output =9

case =5
input =10
152 143 117 154 62 78 123 79 105 140
output =5

case =6
input =20
55 46 49 51 43 46 47 43 48 42 54 42 50 52 46 59 53 40 48 56
output =11

case =7
input =25
45 36 59 47 43 32 51 49 45 30 60 59 46 54 52 42 32 48 43 59 47 32 52 39 51
output =12

case =8
input =30
29 27 32 27 28 31 45 25 50 28 22 25 42 21 28 34 33 41 41 27 44 25 40 27 42 25 34 50 28 26
output =18
*/
Solution:
import java.util.*;

class PersonsInLift {
    public int maxNumberOfPersons(int[] arr) {
        Arrays.sort(arr);
        int i = 0, weight = 0; 
        for(i=0; i<arr.length && weight + arr[i] <= 500 ; i++) {
            weight += arr[i]; 
        }
        return i; 
    }
	public static void main( String args[])
	{
		Scanner sc=new Scanner(System.in);
		int N=sc.nextInt();
		int[] persons=new int[N];
		for(int i=0;i<N;i++)
			persons[i]=sc.nextInt();
		System.out.println(new PersonsInLift().maxNumberOfPersons(persons));
	}
}