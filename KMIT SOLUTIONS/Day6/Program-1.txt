/*
Mr Rakesh is interested to work on Data Structures.
He has constructed a BinaryTree-BT.

He asked his friend Anil to check whether BT is self mirror tree or not.
Can you help Anil to find and return "true" if the given BT is a self mirror tree,
otherwise return "false".

Implement the class Solution:
   1. public boolean isSelfMirrorTree(BinaryTreeNode root): returns a boolean value.
  
NOTE:
	- In the tree '-1', indicates empty(null).
   
Input Format:
-------------
A single line of space separated integers, values at the treenode

Output Format:
--------------
Print a boolean value.


Sample Input-1:
---------------
2 1 1 2 3 3 2

Sample Output-1:
----------------
true


Sample Input-2:
---------------
2 1 1 -1 3 -1 3

Sample Output-2:
----------------
false


Test Cases:
case =1
input =2 1 1 2 3 3 2
output =true

case =2
input =2 1 1 -1 3 -1 3
output =false

case =3
input =2 1 1 -1 3 3 -1 -1 -1 -1 3 3 -1 -1 -1
output =true

case =4
input =2 1 1 2 3 3 2 -1 1 2 3 1 2 3 -1
output =false

case =5
input =1 2 2 3 2 2 3 4 3 2 1 1 2 3 4 8 7 6 5 4 5 6 7 7 6 5 4 5 6 7 8
output =true

case =6
input =1 2 2 3 2 2 3 4 3 2 1 1 2 3 4 8 7 6 5 4 5 6 7 8 7 6 5 4 4 5 6
output =false

case =7
input =1 2 2 3 4 4 3 4 -1 -1 5 -1 5 -1 4 5 6 7 8 -1 -1 -1 -1 -1 -1 -1 -1 8 7 6 5
output =false

case =8
input =1 2 2 3 4 4 3 4 5 -1 -1 -1 -1 5 4 5 6 7 8 -1 -1 -1 -1 -1 -1 -1 -1 8 7 6 5
output =true
*/
Solutions:
/*
//TreeNode Structure for Your Reference..

class BinaryTreeNode{
	public int data; 
	public BinaryTreeNode left, right; 
	public BinaryTreeNode(int data){
		this.data = data; 
		left = null; 
		right = null; 
	}
}

*/
class Solution{
    public boolean isSelfMirrorTree(BinaryTreeNode root) {
        return root==null || isSelfMirrorTreeHelp(root.left, root.right);
    }

    private boolean isSelfMirrorTreeHelp(BinaryTreeNode left, BinaryTreeNode right){
        if(left==null || right==null)
            return left==right;
        if(left.data!=right.data)
            return false;
        return isSelfMirrorTreeHelp(left.left, right.right) && isSelfMirrorTreeHelp(left.right, right.left);
    }
}


Background File:
import java.util.*;

class BinaryTreeNode{
	public int data; 
	public BinaryTreeNode left, right; 
	public BinaryTreeNode(int data){
		this.data = data; 
		left = null; 
		right = null; 
	}
}

public class BinaryTree{
	static BinaryTreeNode root;
	static BinaryTreeNode temp = root;
	void insert(BinaryTreeNode temp, int key)
    {
 
        if (temp == null) {
            root = new BinaryTreeNode(key);
            return;
        }
        Queue<BinaryTreeNode> q = new LinkedList<BinaryTreeNode>();
        q.add(temp);
 
        // Do level order traversal until we find
        // an empty place.
        while (!q.isEmpty()) {
            temp = q.peek();
            q.remove();
 
            if (temp.left == null) {
                temp.left = new BinaryTreeNode(key);
                break;
            }
            else
                q.add(temp.left);
 
            if (temp.right == null) {
                temp.right = new BinaryTreeNode(key);
                break;
            }
            else
                q.add(temp.right);
        }
    }
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		String str[]=sc.nextLine().split(" ");
		BinaryTree bt=new BinaryTree();
		root=new BinaryTreeNode(Integer.parseInt(str[0]));
		for(int i=1; i<str.length; i++)
			bt.insert(root,Integer.parseInt(str[i]));
		Solution sol= new Solution();
		System.out.println(sol.isSelfMirrorTree(root));
		
	}
}