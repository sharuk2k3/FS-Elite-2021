/*
Your playing a game, the game contains m*n grid.
Each cell in the grid represent the health points.
You can move one step either downwads or rightwards only.
Whenever you visit a cell in the grid, you will lose the 
same health points of the cell.

You will start at (0,0) cell of the grid and have to reach (m-1)*(n-1) cell.
Your task is to minimize the loss of overall health points.

Input Format:
-------------
Line-1: Two integers M and N.
Next M lines: N space separated integers, health points in each row of the grid.

Output Format:
--------------
Print an integer, minimal loss of overall health points.


Sample Input-1:
---------------
3 3
1 3 1
1 5 1
4 2 1

Sample Output-1:
----------------
7

Explanation:
------------
start at cell(0,0) =>  1→3→1→1→1 minimizes the loss of health points.


Sample Input-2:
---------------
4 4
8 6 9 3
7 6 2 1
5 5 7 9
8 9 6 2

Sample Output-2:
----------------
34

Explanation:
------------
start at cell(0,0) =>  8→6→6→2→1→9→2 minimizes the loss of health points.


Test Cases:
case =1
input =3 3
1 3 1
1 5 1
4 2 1
output =7

case =2
input =4 4
8 6 9 3
7 6 2 1
5 5 7 9
8 9 6 2
output =34

case =3
input =4 4
1 13 4 2
14 13 5 14
15 11 13 9
12 1 1 5
output =42

case =4
input =5 8
25 6 16 2 1 22 15 21
9 25 16 22 16 12 2 5
16 10 16 9 21 19 23 16
10 12 24 2 2 18 9 16
24 13 2 24 18 22 3 4
output =118

case =5
input =7 8
20 23 20 1 5 23 11 12
10 17 17 6 17 16 20 24
18 4 1 9 13 25 5 23
8 8 25 6 10 9 3 20
24 23 16 10 7 2 10 3
24 25 16 5 23 17 20 11
9 10 11 5 18 9 5 1
output =111

case =6
input =6 9
11 20 5 8 12 12 9 5 10
8 19 4 19 19 19 24 6 16
8 6 5 21 17 1 24 1 17
17 15 16 8 3 25 17 17 5
16 16 7 9 7 13 13 13 2
1 18 9 6 15 8 23 4 25
output =138

case =7
input =9 7
23 8 2 2 11 14 19
6 8 14 25 15 8 19
9 15 15 15 4 12 17
6 8 2 4 1 15 1
17 14 1 9 24 25 12
25 3 19 13 10 5 15
25 3 19 12 21 16 16
22 9 9 25 13 19 24
21 5 21 7 5 12 14
output =145

case =8
input =10 10
6 21 5 24 16 14 16 6 8 6
7 10 9 9 25 2 8 6 5 1
9 1 20 6 23 22 17 12 7 8
23 15 2 20 2 22 14 3 9 24
3 13 7 4 23 24 12 11 3 6
23 21 24 24 23 10 23 17 2 24
17 16 11 13 10 14 19 23 11 20
25 23 19 15 22 22 21 2 10 19
9 25 17 19 10 5 15 24 8 17
10 3 17 20 20 24 14 22 13 18
output =168
*/

Solution:

import java.util.*;

public class MinLossOfHealth{
    public int minLossOfHealth(int[][] grid) {
        for (int i = grid.length - 1; i >= 0; i--) {
            for (int j = grid[0].length - 1; j >= 0; j--) {
                if(i == grid.length - 1 && j != grid[0].length - 1)
                    grid[i][j] = grid[i][j] +  grid[i][j + 1];
                else if(j == grid[0].length - 1 && i != grid.length - 1)
                    grid[i][j] = grid[i][j] + grid[i + 1][j];
                else if(j != grid[0].length - 1 && i != grid.length - 1)
                    grid[i][j] = grid[i][j] + Math.min(grid[i + 1][j],grid[i][j + 1]);
            }
        }
        return grid[0][0];
    }
    public static void main(String args[])
    { 
	Scanner sc=new Scanner(System.in);
	int m=sc.nextInt();
	int n=sc.nextInt();
	int grid[][]=new int[m][n];
	for(int i=0;i<m;i++) 
      	for(int j=0;j<n;j++)
	grid[i][j]=sc.nextInt();
	System.out.println(new MinLossOfHealth().minLossOfHealth(grid));
    }
}