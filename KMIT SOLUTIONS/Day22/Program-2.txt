/*
Pramod is working on words. He used to remove all the duplicate letters 
from a word. Pramod is given a word W. His task to remove all the duplicate 
letters from W, in such a way that the resulatant word R, contains 
no duplicate letters and all distinct letters from W should be there in R. 
And R should appear first in the dictionary order. 

Input Format:
-------------
A String, the word W.

Output Format:
--------------
Print a String, resulatant word R.


Sample Input-1:
---------------
cbadccb

Sample Output-1:
----------------
adcb


Sample Input-2:
---------------
silicosis

Sample Output-2:
----------------
ilcos

Test Cases:
case =1
input =cbadccb
output ="adcb"

case =2
input =silicosis
output ="ilcos"

case =3
input =bcabc
output ="abc"

case =4
input =yellowwooddoor 
output ="yelowdr"

case =5
input =pneumonoultramicroscopicsilicovolcanoconiosis
output ="emnoultacrpisv"

case =6
input =antidisestablishmentarianism
output ="adblhentrism"

case =7
input =dermatoglyphics
output ="dermatoglyphics"

case =8
input =pseudopseudohypoparathyroidism
output ="deuhopartyism"

*/

Solution:
import java.util.*;

class SmallestSubsequence {
    public String smallestSubsequence(String S) {
        Stack<Integer> stack = new Stack<>();
        int[] last = new int[26], seen = new int[26];
        for (int i = 0; i < S.length(); ++i)
            last[S.charAt(i) - 'a'] = i;
        for (int i = 0; i < S.length(); ++i) {
            int c = S.charAt(i) - 'a';
            if (seen[c]++ > 0) continue;
            while (!stack.isEmpty() && stack.peek() > c && i < last[stack.peek()])
                seen[stack.pop()] = 0;
            stack.push(c);
        }
        StringBuilder sb = new StringBuilder();
        for (int i : stack) sb.append((char)('a' + i));
        return sb.toString();
    }
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		String s=sc.next();
		System.out.println(new SmallestSubsequence().smallestSubsequence(s));
	}
}