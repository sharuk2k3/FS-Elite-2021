/*
Umesh is a Mathematician,
He is given a task to his student Shanker, 
There are N coins in a row, indexed from 0 to N-1, intially all the coins are 
facing "tail". And Umesh has given him a final State-to-Achieve.

Shanker can achieve the final state by doing a swap operation as follows:
    - Shanker can choose any index i, 
    - all the coins has to be swap their faces, from "head" to "tail" 
    or "tail to "head" from index 'i' to 'N-1'.

Shanker is given a binary string S, State-to-Achieve contains [0,1] only. 
"tail" indicates with '0' and "head" indicates with '1'

Please help Shanker to find the minimum number of swap operations required 
to reach State-to-Achieve.


Input Format:
-------------
A String S, final State-to-Achieve.

Output Format:
--------------
Print an integer, minimum number of swap operations.


Sample Input-1:
---------------
10111010

Sample Output-1:
----------------
6

Explanation: 
------------
Initial configuration "00000000".
swap from the first coin: "00000000" -> "11111111"
swap from the second coin: "11111111" -> "10000000"
swap from the third coin: "10000000" -> "10111111"
swap from the sixth coin: "10111111" -> "10111000"
swap from the seventh coin: "10111000" -> "10111011"
swap from the eighth coin: "10111011" -> "10111010"
A total of 6 swap operations required.


Sample Input-2:
---------------
11111

Sample Output-2:
----------------
1

Test Cases:
case =1
input =10111010
output =6

case =2
input =1011101
output =5

case =3
input =11111
output =1

case =4
input =101010101010
output =12

case =5
input =101101110010010001001
output =13

case =6
input =10110111011101100110110101110
output =18

case =7
input =10110111011101100110110101110101101110010010001001
output =31

case =8
input =1011111101010110010110101110101101010010010001001101101110111
output =39

*/
Solution:
import java.util.*;

class BulbSwitcher {
    public int minSwitcher(String target) {
        int res = 0;
        for (int i = 0; i < target.length(); ++i) {
            // res == how many times it has been flipped so far for bulb i
            if (((res % 2) == 0 && target.charAt(i) == '1') || // unchanged, but need to flip to 1
                ((res % 2) == 1 && target.charAt(i) == '0')) { // changed, but target is 0

                ++res;
            }
        }
        return res;
    }
	
	public static void main(String[] args) { 
		Scanner sc=new Scanner(System.in);
		String s=sc.next();
		System.out.println(new BulbSwitcher().minSwitcher(s) ); 
	}
}