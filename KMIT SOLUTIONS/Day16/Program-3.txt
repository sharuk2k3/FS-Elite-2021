/*
Vicky, an expert in gaming software, lives in Australia and never compromises in his life, a
principle that he adheres to since his childhood. After long time he returns to India to
establish a start-up gaming company. He meets his uncle Jalsa Kishore and Vicky tells about
his plan .Jalsa Kishore came up with an idea for Vicky with a new game .He draws a grid
with combination of 0’s and 1’s of size P X Q, where we can reorganize the columns of the
grid in any order. Jalsa Kishore says that build a grid such that we get the area of the greatest
subunits within the grid where every unit of the sub grid is 1 after reorganizing the columns.

Now it’s your aim to write a method which prints the area of the greatest subunits within the
grid according to idea of Jalsa Kishore.


Input Format:
-------------
Line-1: Two integers P and Q, size of the grid.
Next P lines: Q separated integers, either 0 or 1.

Output Format:
--------------
Print an integer, area of the greatest subunits.


Sample Input-1:
---------------
3 4
1 0 1 0
0 1 1 1
0 1 0 1

Sample Output-1:
----------------
4


Sample Input-2:
---------------
1 5
1 0 1 0 1

Sample Output-2:
----------------
3

Test Cases:
case =1
input =3 4
1 0 1 0
0 1 1 1
0 1 0 1
output =4

case =2
input =1 5
1 0 1 0 1
output =3

case =3
input =5 6
0 1 0 1 0 0
0 0 1 0 0 1
1 0 0 1 0 0
1 1 1 1 0 0
0 1 1 1 1 0
output =6

case =4
input =5 6
0 0 0 1 0 0
1 1 1 0 1 1
1 0 1 1 1 0
1 1 1 0 1 1
1 0 1 1 0 0
output =9

case =5
input =3 3
1 0 0
1 1 1
1 0 1
output =4

case =6
input =5 10
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
output =0

case =7
input =5 10
1 1 0 1 0 1 0 1 1 1
0 1 1 0 1 1 1 1 0 1
1 1 1 1 0 0 1 1 1 1
0 0 1 1 1 1 1 1 1 1
1 0 1 1 0 1 1 1 1 0
output =15

case =8
input =8 8
1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1
output =64

*/
Solution:

import java.util.*;

class LargestSubMatrix
{
    public int largestSubmatrix(int[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;
        for(int i = 1; i < m; i++){
            for(int j = 0; j < n; j++){
                if(matrix[i][j] == 1){
                    matrix[i][j] = matrix[i - 1][j] + 1;
                }
            }
        }
        
        int res = 0;
        for(int i = 0; i < m; i++){
            Arrays.sort(matrix[i]);
            for(int j = 0; j < n; j++){
                res = Math.max(res, matrix[i][j] * (n - j));
            }
        }      
        return res;
    }
	
	public static void main(String[] args) { 
		Scanner sc=new Scanner(System.in);
		int m=sc.nextInt();
		int n=sc.nextInt();
		int grid[][]=new int[m][n];
		for(int i=0;i<m;i++)
		for(int j=0;j<n;j++)
			grid[i][j]=sc.nextInt();
		System.out.println(new LargestSubMatrix().largestSubmatrix(grid) ); 
	}
}