/*
The bomb grid is filled with danger values, with both positive and negative integers.
positive means you will lose power of grid[i][j], 
negative means you will gain power of grid[i][j].

Naresh wants to cross the bridge, with the minimum loss of power.
He can cross the grid in the following way:
	- He can start at any bomb cell in the first row.
	- He can step on the next bomb cell in the next row that 
	  is either directly below of the current cell or diagonally left/right. 
	- Specifically, the next bomb cell from position grid(i, j) will be grid(i+1,j-1),
	(i + 1, j) , or (i + 1, j + 1) .

Can you help Naresh to lose the minimum power after crossing the bomb grid.

Input Format:
-------------
Line-1: An integer N, size of N*N grid 
Next N lines: N space separated  integers, values in the grid.

Output Format:
--------------
Print an integer, minimum sum of TopDown path.


Sample Input-1:
---------------
3
1 3 2
5 4 6
9 8 7

Sample Output-1:
----------------
12

Explanation:
-------------
Minimum lose of power is as follows:
start from bomb cell	1 -> 4 -> 7
Total lose is 12.


Sample Input-2:
---------------
3
32 10 23
-15 14 -16
19 -18 17

Sample Output-2:
----------------
-24

Explanation:
-------------
Minimum lose of power is as follows:
start from bomb cell	10 -> -16 -> -18
Total lose is -24.


Test Cases:
case =1
input =3
1 3 2
5 4 6
9 8 7
output =12

case =2
input =3
32 10 23
-15 14 -16
19 -18 17
output =-24

case =3
input =5
32 -90 -59 -94 84
55 -92 96 64 81
-100 -97 -79 68 -13
-92 -30 -50 94 -95
79 -35 -3 -56 48
output =-409

case =4
input =6
-23 85 73 62 80 16
76 -14 -100 39 93 -91
51 62 70 63 97 10
-15 -25 77 71 60 -5
91 -71 28 20 -4 43
-15 -29 -50 -3 -7 11
output =-132

case =5
input =7
-59 29 -89 -43 -92 -13 -33
43 75 -23 86 31 -89 -62
83 89 -35 22 -14 -15 -91
45 83 7 99 55 -14 -55
19 -41 -8 -26 44 -84 -66
60 32 59 93 -97 59 -51
92 -58 7 -25 -41 88 69
output =-549

case =6
input =7
90 89 32 22 29 78 23
68 2 11 67 98 -8 89
64 62 28 84 52 13 1
30 87 100 96 26 82 -6
62 87 12 37 73 14 41
44 33 63 32 67 43 6
86 90 4 57 79 82 68
output =98

case =7
input =8
86 -27 -11 23 -50 -18 94 80
11 51 17 4 47 -40 8 69
-32 82 30 11 -32 6 12 41
-11 88 18 26 59 68 5 -31
98 -2 67 -28 66 96 -19 100
5 -31 72 -1 75 -23 -14 30
4 -5 -36 57 98 -13 96 71
34 -20 -9 -32 75 39 70 25
output =-193

case =8
input =10
13 12 53 39 91 -3 -17 42 4 57
-3 76 72 54 39 30 53 -17 81 95
-21 14 -22 63 -25 -12 6 37 -3 93
60 38 93 82 -8 23 92 73 -9 10
37 91 1 97 -9 -8 -24 84 -6 10
1 -21 14 7 40 31 23 48 62 87
9 32 -11 41 100 4 81 64 79 29
85 28 56 -1 100 73 79 96 100 4
84 -14 81 95 22 3 87 -3 10 85
39 92 67 76 7 47 100 39 6 15
output =-5
    
*/
Solution:
import java.util.*;
class FallingPathSum {
    int[][] dp;
    public int minFallingPathSum(int[][] A) {
        dp = new int[A.length][A[0].length];
        for(int i=0;i<A.length;i++){
           for(int j=0;j<A[i].length;j++){
                getMinimum(A,i,j); 
           } 
        }
        int res = Integer.MAX_VALUE;
        for(int a:dp[dp.length-1]){
            if(a<res)res =a;
        }
        return res;
    }
    
    private void getMinimum(int[][] A,int i, int j){
        dp[i][j] = A[i][j];
        if(i==0)return;
        if(i>0 && j==0){
            dp[i][j] += Math.min(dp[i-1][j],dp[i-1][j+1]);
        }else if(i>0 && j==A[i].length-1){
            dp[i][j] += Math.min(dp[i-1][j],dp[i-1][j-1]);
        }else{
            dp[i][j] += Math.min(Math.min(dp[i-1][j],dp[i-1][j-1]),dp[i-1][j+1]);
        }
    }
	
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int arr[][]=new int[n][n];
		for(int i=0;i<n;i++)
		for(int j=0;j<n;j++)
			arr[i][j]=sc.nextInt();
		System.out.println(new FallingPathSum().minFallingPathSum(arr));
	}
}